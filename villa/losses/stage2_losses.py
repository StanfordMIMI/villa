import torch
import torch.nn.functional as F
from villa.losses.default import BaseLoss


class Stage2_Loss(BaseLoss):
    def __init__(self, temp: float, lambd: float = 0.5):
        """
        Initialize loss function for ViLLA Stage 2. This class implements
        the standard bidirectional InfoNCE loss function.

        Parameters:
            temp (float): Loss temperature parameter
            lambd (float): Weight assigned to first InfoNCE loss term
        """
        super().__init__()
        self.temperature = temp
        self.lambd = lambd

    def forward(self, pred: dict, sample: dict):
        """
        Compute loss function for ViLLA Stage 2.

        Parameters:
            pred (dict): Predictions generated by model
            sample (dict): Data associated with each sample
        Returns:
            loss (torch.Tensor): Final loss value
        """
        img, txt = pred["img_emb"].float().cuda(), sample["txt_emb"].float().cuda()
        batch_size = img.shape[0]

        dists = img @ txt.T / self.temperature

        softmax_scores_1 = F.log_softmax(dists, dim=1)
        softmax_scores_2 = F.log_softmax(dists, dim=0)

        labels = torch.arange(batch_size)
        loss = self.lambd * F.nll_loss(
            softmax_scores_1, labels.cuda(), reduction="sum"
        ) + (1 - self.lambd) * F.nll_loss(
            softmax_scores_2, labels.cuda(), reduction="sum"
        )
        loss = loss / batch_size

        self.update_running_loss(loss)
        return loss
